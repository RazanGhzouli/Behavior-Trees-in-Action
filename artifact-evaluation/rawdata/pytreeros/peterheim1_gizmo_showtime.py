#!/usr/bin/env python
#
# License: BSD
#   https://raw.githubusercontent.com/stonier/py_trees/devel/LICENSE
#
##############################################################################
# Documentation
##############################################################################

"""
About
^^^^^

A few new items arriving in tantalising bowls of flying spaghetti here:

* A gui for manually triggering events
* A gui (same one) for visualising the led strip status
* A lower priority work branch triggered from the gui
* A first action client behaviour
* A kind of pre-emption, via behaviour tree decision logic

Tree
^^^^

.. graphviz:: dot/tutorial-five.dot

.. literalinclude:: ../py_trees_ros/tutorials/five.py
   :language: python
   :linenos:
   :lines: 121-179
   :caption: py_trees_ros/tutorials/five.py#create_root

**Guards**

.. graphviz:: dot/tutorial-five-guard.dot

The entire scan branch is protected by a :term:`guard` (note that the blackbox
in the above diagram is exactly that, a black box representing the lower
part of the tree). Once the scan event is received, this branch gets to work
until it either finishes, or is pre-empted by the higher priority low battery
branch.

**A Kind of Preemption**

.. graphviz:: dot/tutorial-five-preempt.dot

The second part of the tree enables a kind of pre-emption on the scanning action.
If a new request comes in, it will trigger the secondary scan event check, invalidating
whatever scanning action was currently running. This will clear the led command and
cancel the rotate action. On the next tick, the scan event check will fail (it was
consumed on the last tick) and the scanning will restart.

.. note::
    This is not true pre-emption since it cancels the rotate action and restarts it. It is
    however, exactly the pattern that is required in many instances. For true pre-emption
    you could bundle both scan check and rotation action in the same behaviour or dynamically
    insert action goals on the fly from the parent class.

**Handling Failure**

If the rotate action should fail, then the whole branch will also fail. Subsequently
dropping the robot back to its idle state. A failure event could be generated by
simply watching either the 'Scanning' parallel or the :meth:`~py_trees.trees.BehaviourTree.tip`
of the tree and reacting to it's state change.

Behaviours
^^^^^^^^^^

Introducing the rotate action client behaviour!

.. literalinclude:: ../py_trees_ros/tutorials/five.py
   :language: python
   :linenos:
   :lines: 158-163
   :caption: py_trees_ros/tutorials/five.py#action_client_instantiation

.. literalinclude:: ../py_trees_ros/actions.py
   :language: python
   :linenos:
   :lines: 28-121
   :caption: py_trees_ros/actions.py#ActionClient

The :class:`~py_trees_ros.actions.ActionClient` is a generic template that can be used as
a drop-in for very simply monitoring the aborted/cancelled/running/success state of an
underlying controller with a pre-configured goal. See the :class:`api <py_trees_ros.actions.ActionClient>`
for details on when/how you might wish to extend this.

Running
^^^^^^^

.. code-block:: bash

    $ roslaunch py_trees_ros tutorial_five.launch --screen

**Playing with the Spaghetti**

* Press the scan button to start a scan
* Press the scan button again while mid-scanning to pre-empt
* Set battery low in reconfigure whilst mid-scanning to priority switch

.. image:: images/tutorial-five-scanning.png
"""

##############################################################################
# Imports
##############################################################################

import functools
import py_trees
import py_trees_ros
import py_trees.console as console
import py_trees_msgs.msg as py_trees_msgs
import rospy
import sys
#from actionlib_msgs.msg import *
from phoenix_msgs.msg import *
import move_base_msgs.msg as move_base_msgs
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import PoseWithCovarianceStamped, Quaternion
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from math import radians, degrees
##############################################################################
# Behaviours
##############################################################################


def create_root():
    # behaviours
    root = py_trees.composites.Parallel("gizmo")
    topics2bb = py_trees.composites.Sequence("Topics2BB")
    scan2bb = py_trees_ros.subscribers.EventToBlackboard(
        name="Scan2BB",
        topic_name="/dashboard/scan",
        variable_name="event_scan_button"
    )

    priorities = py_trees.composites.Selector("Priorities")    
    ######################### scan
    Showtime = py_trees.composites.Sequence(name="Showtime")
    is_scan_requested = py_trees.blackboard.CheckBlackboardVariable(
        name="Start show?",
        variable_name='event_scan_button',
        expected_value=True
    )

    Stage_center = py_trees.composites.Sequence(name="stage_center")
    Stage_left = py_trees.composites.Sequence(name="stage_left")
    Stage_right = py_trees.composites.Sequence(name="stage_right")

    move_center = py_trees_ros.actions.ActionClient(
        name="Move Center",
        action_namespace="/move_base",
        action_spec=move_base_msgs.MoveBaseAction,
        action_goal= create_nav_goal(1.593, -0.350,1.363),
        override_feedback_message_on_running="rotating"
    )

    move_left = py_trees_ros.actions.ActionClient(
        name="Move left",
        action_namespace="/move_base",
        action_spec=move_base_msgs.MoveBaseAction,
        action_goal= create_nav_goal(1.777, 0.406,1.042),
        override_feedback_message_on_running="rotating"
    )

    move_right = py_trees_ros.actions.ActionClient(
        name="Move right",
        action_namespace="/move_base",
        action_spec=move_base_msgs.MoveBaseAction,
        action_goal= create_nav_goal(1.546, -0.411,1.581),
        override_feedback_message_on_running="rotating"
    )

    home = py_trees_ros.actions.ActionClient(
        name="home",
        action_namespace="/move_base",
        action_spec=move_base_msgs.MoveBaseAction,
        action_goal= create_nav_goal(-0.045, 0.172,0.486),
        override_feedback_message_on_running="rotating"
    )

    voice1 = py_trees_ros.actions.ActionClient(
        name="Welcome",
        action_namespace="/voice_action",
        action_spec=VoiceAction,
        action_goal=voice_msg("Welcome to SHOW time.     my name is Robbie, This is where I get to demonstrate my capabilities"),
        override_feedback_message_on_running="rotating"
    )

    voice2 = py_trees_ros.actions.ActionClient(
        name="left_talk",
        action_namespace="/voice_action",
        action_spec=VoiceAction,
        action_goal=voice_msg("I can move to my left"),
        override_feedback_message_on_running="rotating"
    )

    voice3 = py_trees_ros.actions.ActionClient(
        name="Right talk",
        action_namespace="/voice_action",
        action_spec=VoiceAction,
        action_goal=voice_msg("I can move to my right"),
        override_feedback_message_on_running="rotating"
    )

    voice4 = py_trees_ros.actions.ActionClient(
        name="return center",
        action_namespace="/voice_action",
        action_spec=VoiceAction,
        action_goal=voice_msg("And back to the center"),
        override_feedback_message_on_running="rotating"
    )

    voice5 = py_trees_ros.actions.ActionClient(
        name="end talk",
        action_namespace="/voice_action",
        action_spec=VoiceAction,
        action_goal=voice_msg("Thank you very much for yourtime.   Goodbye"),
        override_feedback_message_on_running="rotating"
    )
    
    idle = py_trees.behaviours.Running(name="Idle")

    ################### tree
    root.add_children([topics2bb, priorities])
    topics2bb.add_children([scan2bb])
    priorities.add_children([Showtime, idle])
    Showtime.add_children([is_scan_requested,  Stage_center, Stage_left, Stage_right])
    Stage_center.add_children([move_center, voice1])
    Stage_left.add_children([voice2, move_left, voice4, move_center])
    Stage_right.add_children([voice3, move_right, voice4, move_center, voice5, home])
    return root

def voice_msg(text):
    g = VoiceGoal()
    g.text = text
    return g

def create_nav_goal(x, y, yaw):
    """Create a MoveBaseGoal with x, y position and yaw rotation (in degrees).
Returns a MoveBaseGoal"""
    mb_goal = MoveBaseGoal()
    mb_goal.target_pose.header.frame_id = 'map' # Note: the frame_id must be map
    mb_goal.target_pose.pose.position.x = x
    mb_goal.target_pose.pose.position.y = y
    mb_goal.target_pose.pose.position.z = 0.0 # z must be 0.0 (no height in the map)

    # Orientation of the robot is expressed in the yaw value of euler angles
    angle = radians(yaw) # angles are expressed in radians
    quat = quaternion_from_euler(0.0, 0.0, angle) # roll, pitch, yaw
    mb_goal.target_pose.pose.orientation = Quaternion(*quat.tolist())

    return mb_goal


def shutdown(behaviour_tree):
    behaviour_tree.interrupt()

##############################################################################
# Main
##############################################################################


def main():
    """
    Entry point for the demo script.
    """
    rospy.init_node("tree")
    root = create_root()
    behaviour_tree = py_trees_ros.trees.BehaviourTree(root)
    rospy.on_shutdown(functools.partial(shutdown, behaviour_tree))
    if not behaviour_tree.setup(timeout=15):
        console.logerror("failed to setup the tree, aborting.")
        sys.exit(1)
    behaviour_tree.tick_tock(500)

if __name__ == '__main__':
    main()

